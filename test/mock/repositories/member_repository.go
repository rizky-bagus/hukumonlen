// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/repositories/member_repository.go

// Package mock_repositories is a generated GoMock package.
package mock_repositories

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"

	entity "hukum-onlen-go/entity"
)

// MockIMemberRepository is a mock of IMemberRepository interface.
type MockIMemberRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIMemberRepositoryMockRecorder
}

// MockIMemberRepositoryMockRecorder is the mock recorder for MockIMemberRepository.
type MockIMemberRepositoryMockRecorder struct {
	mock *MockIMemberRepository
}

// NewMockIMemberRepository creates a new mock instance.
func NewMockIMemberRepository(ctrl *gomock.Controller) *MockIMemberRepository {
	mock := &MockIMemberRepository{ctrl: ctrl}
	mock.recorder = &MockIMemberRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIMemberRepository) EXPECT() *MockIMemberRepositoryMockRecorder {
	return m.recorder
}

// CreateMember mocks base method.
func (m *MockIMemberRepository) CreateMember(ctx context.Context, member *entity.Member) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMember", ctx, member)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateMember indicates an expected call of CreateMember.
func (mr *MockIMemberRepositoryMockRecorder) CreateMember(ctx, member interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMember", reflect.TypeOf((*MockIMemberRepository)(nil).CreateMember), ctx, member)
}

// FindAllMembers mocks base method.
func (m *MockIMemberRepository) FindAllMembers(ctx context.Context, email string) ([]*entity.Member, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllMembers", ctx, email)
	ret0, _ := ret[0].([]*entity.Member)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllMembers indicates an expected call of FindAllMembers.
func (mr *MockIMemberRepositoryMockRecorder) FindAllMembers(ctx, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllMembers", reflect.TypeOf((*MockIMemberRepository)(nil).FindAllMembers), ctx, email)
}

// FindMemberByID mocks base method.
func (m *MockIMemberRepository) FindMemberByID(ctx context.Context, id string) (*entity.Member, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindMemberByID", ctx, id)
	ret0, _ := ret[0].(*entity.Member)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindMemberByID indicates an expected call of FindMemberByID.
func (mr *MockIMemberRepositoryMockRecorder) FindMemberByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindMemberByID", reflect.TypeOf((*MockIMemberRepository)(nil).FindMemberByID), ctx, id)
}
