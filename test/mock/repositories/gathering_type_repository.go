// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/repositories/gathering_type_repository.go

// Package mock_repositories is a generated GoMock package.
package mock_repositories

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"

	entity "hukum-onlen-go/entity"
)

// MockIGatheringTypeRepository is a mock of IGatheringTypeRepository interface.
type MockIGatheringTypeRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIGatheringTypeRepositoryMockRecorder
}

// MockIGatheringTypeRepositoryMockRecorder is the mock recorder for MockIGatheringTypeRepository.
type MockIGatheringTypeRepositoryMockRecorder struct {
	mock *MockIGatheringTypeRepository
}

// NewMockIGatheringTypeRepository creates a new mock instance.
func NewMockIGatheringTypeRepository(ctrl *gomock.Controller) *MockIGatheringTypeRepository {
	mock := &MockIGatheringTypeRepository{ctrl: ctrl}
	mock.recorder = &MockIGatheringTypeRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIGatheringTypeRepository) EXPECT() *MockIGatheringTypeRepositoryMockRecorder {
	return m.recorder
}

// CreateGatheringType mocks base method.
func (m *MockIGatheringTypeRepository) CreateGatheringType(ctx context.Context, gatheringType *entity.GatheringType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGatheringType", ctx, gatheringType)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateGatheringType indicates an expected call of CreateGatheringType.
func (mr *MockIGatheringTypeRepositoryMockRecorder) CreateGatheringType(ctx, gatheringType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGatheringType", reflect.TypeOf((*MockIGatheringTypeRepository)(nil).CreateGatheringType), ctx, gatheringType)
}

// FindAllGatheringTypes mocks base method.
func (m *MockIGatheringTypeRepository) FindAllGatheringTypes(ctx context.Context) ([]*entity.GatheringType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllGatheringTypes", ctx)
	ret0, _ := ret[0].([]*entity.GatheringType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllGatheringTypes indicates an expected call of FindAllGatheringTypes.
func (mr *MockIGatheringTypeRepositoryMockRecorder) FindAllGatheringTypes(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllGatheringTypes", reflect.TypeOf((*MockIGatheringTypeRepository)(nil).FindAllGatheringTypes), ctx)
}

// FindGatheringTypeByID mocks base method.
func (m *MockIGatheringTypeRepository) FindGatheringTypeByID(ctx context.Context, id string) (*entity.GatheringType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindGatheringTypeByID", ctx, id)
	ret0, _ := ret[0].(*entity.GatheringType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindGatheringTypeByID indicates an expected call of FindGatheringTypeByID.
func (mr *MockIGatheringTypeRepositoryMockRecorder) FindGatheringTypeByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindGatheringTypeByID", reflect.TypeOf((*MockIGatheringTypeRepository)(nil).FindGatheringTypeByID), ctx, id)
}
