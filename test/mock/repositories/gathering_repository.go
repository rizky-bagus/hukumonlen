// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/repositories/gathering_repository.go

// Package mock_repositories is a generated GoMock package.
package mock_repositories

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"

	entity "hukum-onlen-go/entity"
)

// MockIGatheringRepository is a mock of IGatheringRepository interface.
type MockIGatheringRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIGatheringRepositoryMockRecorder
}

// MockIGatheringRepositoryMockRecorder is the mock recorder for MockIGatheringRepository.
type MockIGatheringRepositoryMockRecorder struct {
	mock *MockIGatheringRepository
}

// NewMockIGatheringRepository creates a new mock instance.
func NewMockIGatheringRepository(ctrl *gomock.Controller) *MockIGatheringRepository {
	mock := &MockIGatheringRepository{ctrl: ctrl}
	mock.recorder = &MockIGatheringRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIGatheringRepository) EXPECT() *MockIGatheringRepositoryMockRecorder {
	return m.recorder
}

// CreateGathering mocks base method.
func (m *MockIGatheringRepository) CreateGathering(ctx context.Context, gathering *entity.Gathering) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGathering", ctx, gathering)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateGathering indicates an expected call of CreateGathering.
func (mr *MockIGatheringRepositoryMockRecorder) CreateGathering(ctx, gathering interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGathering", reflect.TypeOf((*MockIGatheringRepository)(nil).CreateGathering), ctx, gathering)
}

// FindAllGatherings mocks base method.
func (m *MockIGatheringRepository) FindAllGatherings(ctx context.Context) ([]*entity.Gathering, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllGatherings", ctx)
	ret0, _ := ret[0].([]*entity.Gathering)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllGatherings indicates an expected call of FindAllGatherings.
func (mr *MockIGatheringRepositoryMockRecorder) FindAllGatherings(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllGatherings", reflect.TypeOf((*MockIGatheringRepository)(nil).FindAllGatherings), ctx)
}

// FindGatheringByID mocks base method.
func (m *MockIGatheringRepository) FindGatheringByID(ctx context.Context, id string) (*entity.Gathering, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindGatheringByID", ctx, id)
	ret0, _ := ret[0].(*entity.Gathering)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindGatheringByID indicates an expected call of FindGatheringByID.
func (mr *MockIGatheringRepositoryMockRecorder) FindGatheringByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindGatheringByID", reflect.TypeOf((*MockIGatheringRepository)(nil).FindGatheringByID), ctx, id)
}
