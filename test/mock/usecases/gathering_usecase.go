// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/usecases/gathering_usecase.go

// Package mock_usecases is a generated GoMock package.
package mock_usecases

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "go.uber.org/mock/gomock"

	entity "hukum-onlen-go/entity"
)

// MockIGatheringUsecase is a mock of IGatheringUsecase interface.
type MockIGatheringUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockIGatheringUsecaseMockRecorder
}

// MockIGatheringUsecaseMockRecorder is the mock recorder for MockIGatheringUsecase.
type MockIGatheringUsecaseMockRecorder struct {
	mock *MockIGatheringUsecase
}

// NewMockIGatheringUsecase creates a new mock instance.
func NewMockIGatheringUsecase(ctrl *gomock.Controller) *MockIGatheringUsecase {
	mock := &MockIGatheringUsecase{ctrl: ctrl}
	mock.recorder = &MockIGatheringUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIGatheringUsecase) EXPECT() *MockIGatheringUsecaseMockRecorder {
	return m.recorder
}

// CreateGathering mocks base method.
func (m *MockIGatheringUsecase) CreateGathering(ctx context.Context, name, location string, creatorID, typeID entity.UUID, scheduledAt time.Time, attendeeIDs []entity.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGathering", ctx, name, location, creatorID, typeID, scheduledAt, attendeeIDs)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateGathering indicates an expected call of CreateGathering.
func (mr *MockIGatheringUsecaseMockRecorder) CreateGathering(ctx, name, location, creatorID, typeID, scheduledAt, attendeeIDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGathering", reflect.TypeOf((*MockIGatheringUsecase)(nil).CreateGathering), ctx, name, location, creatorID, typeID, scheduledAt, attendeeIDs)
}

// CreateGatheringType mocks base method.
func (m *MockIGatheringUsecase) CreateGatheringType(ctx context.Context, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGatheringType", ctx, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateGatheringType indicates an expected call of CreateGatheringType.
func (mr *MockIGatheringUsecaseMockRecorder) CreateGatheringType(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGatheringType", reflect.TypeOf((*MockIGatheringUsecase)(nil).CreateGatheringType), ctx, name)
}

// CreateInvitationStatus mocks base method.
func (m *MockIGatheringUsecase) CreateInvitationStatus(ctx context.Context, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateInvitationStatus", ctx, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateInvitationStatus indicates an expected call of CreateInvitationStatus.
func (mr *MockIGatheringUsecaseMockRecorder) CreateInvitationStatus(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInvitationStatus", reflect.TypeOf((*MockIGatheringUsecase)(nil).CreateInvitationStatus), ctx, name)
}

// FindAllGatheringTypes mocks base method.
func (m *MockIGatheringUsecase) FindAllGatheringTypes(ctx context.Context) ([]*entity.GatheringType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllGatheringTypes", ctx)
	ret0, _ := ret[0].([]*entity.GatheringType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllGatheringTypes indicates an expected call of FindAllGatheringTypes.
func (mr *MockIGatheringUsecaseMockRecorder) FindAllGatheringTypes(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllGatheringTypes", reflect.TypeOf((*MockIGatheringUsecase)(nil).FindAllGatheringTypes), ctx)
}

// FindAllGatherings mocks base method.
func (m *MockIGatheringUsecase) FindAllGatherings(ctx context.Context) ([]*entity.Gathering, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllGatherings", ctx)
	ret0, _ := ret[0].([]*entity.Gathering)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllGatherings indicates an expected call of FindAllGatherings.
func (mr *MockIGatheringUsecaseMockRecorder) FindAllGatherings(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllGatherings", reflect.TypeOf((*MockIGatheringUsecase)(nil).FindAllGatherings), ctx)
}

// FindAllInvitationStatuses mocks base method.
func (m *MockIGatheringUsecase) FindAllInvitationStatuses(ctx context.Context) ([]*entity.InvitationStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllInvitationStatuses", ctx)
	ret0, _ := ret[0].([]*entity.InvitationStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllInvitationStatuses indicates an expected call of FindAllInvitationStatuses.
func (mr *MockIGatheringUsecaseMockRecorder) FindAllInvitationStatuses(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllInvitationStatuses", reflect.TypeOf((*MockIGatheringUsecase)(nil).FindAllInvitationStatuses), ctx)
}

// FindGatheringByID mocks base method.
func (m *MockIGatheringUsecase) FindGatheringByID(ctx context.Context, id string) (*entity.Gathering, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindGatheringByID", ctx, id)
	ret0, _ := ret[0].(*entity.Gathering)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindGatheringByID indicates an expected call of FindGatheringByID.
func (mr *MockIGatheringUsecaseMockRecorder) FindGatheringByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindGatheringByID", reflect.TypeOf((*MockIGatheringUsecase)(nil).FindGatheringByID), ctx, id)
}

// FindGatheringTypeByID mocks base method.
func (m *MockIGatheringUsecase) FindGatheringTypeByID(ctx context.Context, id string) (*entity.GatheringType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindGatheringTypeByID", ctx, id)
	ret0, _ := ret[0].(*entity.GatheringType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindGatheringTypeByID indicates an expected call of FindGatheringTypeByID.
func (mr *MockIGatheringUsecaseMockRecorder) FindGatheringTypeByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindGatheringTypeByID", reflect.TypeOf((*MockIGatheringUsecase)(nil).FindGatheringTypeByID), ctx, id)
}

// FindInvitationStatusByID mocks base method.
func (m *MockIGatheringUsecase) FindInvitationStatusByID(ctx context.Context, id string) (*entity.InvitationStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindInvitationStatusByID", ctx, id)
	ret0, _ := ret[0].(*entity.InvitationStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindInvitationStatusByID indicates an expected call of FindInvitationStatusByID.
func (mr *MockIGatheringUsecaseMockRecorder) FindInvitationStatusByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindInvitationStatusByID", reflect.TypeOf((*MockIGatheringUsecase)(nil).FindInvitationStatusByID), ctx, id)
}
